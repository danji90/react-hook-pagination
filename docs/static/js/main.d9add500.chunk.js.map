{"version":3,"sources":["List.jsx","MaterialList.jsx","CodeSnippet.jsx","App.jsx","serviceWorker.js","index.js"],"names":["List","props","ulElement","useRef","useState","data","setData","useLoadMoreOnScroll","fetchSize","scroller","limit","mode","start","end","isFetching","doneFetching","setIsFetching","forceDonefetching","useEffect","fetchHandler","setTimeout","person","slice","className","ref","style","height","overflow","map","i","idx","key","first_name","last_name","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","MaterialList","classes","console","log","ListItem","button","ListItemAvatar","Avatar","alt","fn","ln","toUpperCase","substring","ListItemText","primary","secondary","Typography","component","variant","color","email","Divider","CodeSnippet","input","React","open","setOpen","message","setMessage","handleClose","event","reason","padding","title","Button","onClick","current","focus","select","document","execCommand","err","error","text","opacity","defaultValue","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","action","Fragment","size","IconButton","aria-label","fontSize","flexGrow","spacing","textAlign","paperCenter","App","b","bi","Grid","container","item","xs","md","Paper","gutterBottom","ListItemIcon","primaryTypographyProps","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9add500.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport person from \"./mock.json\";\nimport useLoadMoreOnScroll from 'react-hook-pagination';\n\n\nconst List = props => {\n  const fetchSize = 20;\n  const limit = 1000;\n  const ulElement = useRef();\n  const [data, setData] = useState([]);\n  const {\n    start,\n    end,\n    isFetching,\n    doneFetching,\n    setIsFetching,\n    forceDonefetching\n  } = useLoadMoreOnScroll({ fetchSize, scroller: ulElement, limit:limit, mode:'error' });\n\n  useEffect(() => {\n    if (start !== end) fetchHandler(start, end);\n  }, [start, end]);\n\n  /**\n   *\n   * @param {Number} start : Index to start fetching from or commonaly called 'Offset'\n   * @param {Number} end : Last index\n   */\n  const fetchHandler = (start, end) => {\n    setIsFetching(true);\n    setTimeout(() => {\n      setData([...data, ...person.slice(start, end)]);\n      \n      setIsFetching(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"list\" ref={ulElement} style={{ height: \"400px\", overflow: \"auto\" }}>\n        {data.map((i, idx) => (\n          <div\n          className=\"list-item\"\n            key={idx}\n          >{` ${i.first_name} ${i.last_name}`}</div>\n        ))}\n        {isFetching && <div className=\"list-item-loader\"></div>}\n        {doneFetching && <div className=\"list-item-done\">Done!</div>}\n      </div>\n  );\n};\nexport default List;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport person from \"./mock.json\";\nimport useLoadMoreOnScroll from 'react-hook-pagination';\nimport { List,ListItem, ListItemAvatar, Avatar, ListItemText, Typography, makeStyles, Divider } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n      display: 'block',\n    },\n  }));\n\nconst MaterialList = props => {\n    const classes = useStyles();\n  const fetchSize = 20;\n  const limit = 1000;\n  const ulElement = useRef();\n  const [data, setData] = useState([]);\n  const {\n    start,\n    end,\n    isFetching,\n    doneFetching,\n    setIsFetching,\n    forceDonefetching\n  } = useLoadMoreOnScroll({ fetchSize, scroller: ulElement, limit:limit, mode:'error' });\n\n  useEffect(() => {\n    if (start !== end) fetchHandler(start, end);\n  }, [start, end]);\n\n  /**\n   *\n   * @param {Number} start : Index to start fetching from or commonaly called 'Offset'\n   * @param {Number} end : Last index\n   */\n  const fetchHandler = (start, end) => {\n    console.log(start, end)\n    console.log(\"fetching data...\");\n    setIsFetching(true);\n    setTimeout(() => {\n      setData([...data, ...person.slice(start, end)]);\n      console.log(\"done fetching\");\n      setIsFetching(false);\n    }, 2000);\n  };\n  const getInitials = (fn, ln) =>{\n      return fn.toUpperCase().substring(0,1)\n      + ln.toUpperCase().substring(0,1)\n  }\n  return (\n    <List ref={ulElement} style={{ height: \"400px\", overflow: \"auto\" }}>\n        {data.map((i, idx) => (\n          <>\n          <ListItem\n            button\n            key={idx}\n          >\n              <ListItemAvatar>\n              <Avatar alt=\"Remy Sharp\"  >\n                  {getInitials(i.first_name, i.last_name)}\n              </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={`${i.first_name} ${i.last_name}`} secondary={<Typography\n                component=\"span\"\n                variant=\"body2\"\n                color=\"textSecondary\"\n                className={classes.inline}\n              >\n                {i.email}\n              </Typography>}>\n\n              </ListItemText>\n              </ListItem>\n              <Divider variant=\"inset\" component=\"li\" />\n              </>\n        ))}\n        \n        {isFetching && <div key={-1} className=\"list-item-loader\"></div>}\n      </List>\n  );\n};\nexport default MaterialList;\n","import React, { useRef } from \"react\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport { Button } from \"@material-ui/core\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nconst CodeSnippet = props => {\n  const input = useRef();\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const copy = () => {\n    input.current.focus();\n    input.current.select();\n    try {\n      document.execCommand(\"copy\");\n      setMessage(\"Copied to clipboard\");\n    } catch (err) {\n      console.error(err);\n      setMessage(\"Failed to copy\");\n    } finally {\n      setOpen(true);\n    }\n  };\n  return (\n    <div style={{ padding: \"1em\" }}>\n      <h5>{props.title.toUpperCase()}</h5>\n      <pre style={{ padding: \"1em\" }}>\n        <Button title=\"Copy to Clipboard\" onClick={copy}>\n          <FileCopyIcon color=\"action\" style={{ color: \"white\" }} />\n        </Button>\n        <code>{props.text}</code>\n      </pre>\n      <input\n        style={{ opacity: 0 }}\n        ref={input}\n        defaultValue={props.text}\n      ></input>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        message={message}\n        action={\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              Great!\n            </Button>\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n};\n\nexport default CodeSnippet;\n","import React from \"react\";\nimport {\n  Paper,\n  Grid,\n  makeStyles,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport PlainList from \"./List\";\nimport MaterialList from \"./MaterialList\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CodeSnippet from \"./CodeSnippet\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"#f5f5f5\",\n    padding: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"left\",\n    color: theme.palette.text.primary\n  },\n  paperCenter: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.primary\n  },\n  inline: {\n    display: \"block\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const b = text => <b>{text}</b>;\n  const i = text => <i>{text}</i>;\n  const bi = text => (\n    <b>\n      <i>{text}</i>\n    </b>\n  );\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={4}>\n        <Grid container item xs={12} md={12} spacing={4}>\n          <Grid item xs={12} md={12}>\n            <Paper className={classes.paperCenter}>\n              <Typography gutterBottom variant=\"h2\" color=\"textPrimary\">\n                React Pagination\n              </Typography>\n              <Typography variant=\"h5\" color=\"textPrimary\">\n                Implement load more on scroll using easy to use hooks! 🎉🎉\n              </Typography>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                Features\n              </Typography>\n              <List>\n                <ListItem key={0}>\n                  <ListItemIcon>\n                    <CheckIcon />\n                    <ListItemText\n                      primaryTypographyProps={{ }}\n                      primary={<Typography color=\"textPrimary\"  variant=\"span\">\n                        Easy to use hook API, hook your list/table to a scroll element <br></br>\n                        and wait for the hook to tell you when to fetch next batch of data!\n                      </Typography>}\n                    ></ListItemText>\n                  </ListItemIcon>\n                </ListItem>\n                <ListItem key={1}>\n                  <ListItemIcon>\n                    <CheckIcon />\n                    <ListItemText\n                      primaryTypographyProps={{ color: \"textPrimary\" }}\n                      primary=\"Initial fetch till scroll appears\"\n                    ></ListItemText>\n                  </ListItemIcon>\n                </ListItem>\n                \n                <ListItem key={2}>\n                  <ListItemIcon>\n                    <CheckIcon />\n\n                    <ListItemText\n                      primaryTypographyProps={{ color: \"textPrimary\" }}\n                      primary=\"Customise load behaviour via parameters (fetchSize, limit etc)\"\n                      secondary={\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                          className={classes.inline}\n                        >\n                          Specify fetch size, limit and scroller to monitor\n                          fetch behaviour.\n                        </Typography>\n                      }\n                    ></ListItemText>\n                  </ListItemIcon>\n                </ListItem>\n                <ListItem key={3}>\n                  <ListItemIcon>\n                    <CheckIcon />\n\n                    <ListItemText\n                      primaryTypographyProps={{ color: \"textPrimary\" }}\n                      primary=\"Configure custom loader, end of list behavior\"\n                      secondary={\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                          className={classes.inline}\n                        >\n                          Add Custom loader to notify loading progress\n                        </Typography>\n                      }\n                    ></ListItemText>\n                  </ListItemIcon>\n                </ListItem>\n                <ListItem key={4}>\n                  <ListItemIcon>\n                    <CheckIcon />\n\n                    <ListItemText\n                      primaryTypographyProps={{ color: \"textPrimary\" }}\n                      primary=\"Externalized fetch, you define how to fetch, hook decides when to fetch\"\n                      secondary={\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                          className={classes.inline}\n                        ></Typography>\n                      }\n                    ></ListItemText>\n                  </ListItemIcon>\n                </ListItem>\n              </List>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={12} md={6}>\n            <CodeSnippet\n              title=\"Installation\"\n              text=\"npm install react-hook-pagination\"\n            ></CodeSnippet>\n            <CodeSnippet\n              title=\"Import\"\n              text=\"import useLoadMoreOnScroll from 'react-hook-pagination';\"\n            ></CodeSnippet>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <CodeSnippet\n            title=\"Stub\"\n            text={`\n  const {\n         start,\n         end,\n         isFetching,\n         doneFetching,\n         setIsFetching,\n         forceDonefetching\n       } = useLoadMoreOnScroll({ fetchSize, scroller: ulElement, limit });\n                      \n  useEffect(()=>{\n   // Notify the hook that you are about to fetch\n   setIsFetching(true);\n   //fetch data when start and end changes\n   fetch(start, end).then(res=>{\n    if(!res.body.hasMore){\n      //Stop fetching, else the hook will keep \n      //update start and end to let you fetch more data till limit is exceeded\n      forceDonefetching();\n    }\n    // Notify the hook that you are done fetching data\n    setIsFetching(false);\n    });\n  },[start, end])\n  `}\n          ></CodeSnippet>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              Vanilla HTML\n            </Typography>\n            <PlainList></PlainList>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              Material List\n            </Typography>\n            <MaterialList></MaterialList>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              Documentation\n            </Typography>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              Behaviour\n            </Typography>\n            <Typography variant=\"p\" color=\"textPrimary\">\n              The hook i.e.{bi(\" useLoadMoreOnScroll \")}\n              will let your component know when a new chunk of data {i(\n                \"needs\"\n              )}{\" \"}\n              to be fetched. The need to fetch new data is derived from the\n              below logic:\n              <ul>\n                <p>\n                  In the {i(\"normal\")} load more on scroll behaviour, data is\n                  fetched propressively when the user scroll towards the bottom\n                  of the list. As the minimum threshold is approached. The\n                  minimum threshold is set to 25 pixels by default and can be\n                  altered by setting the {i(\"minDelta\")} prop. The hook updates\n                  the start and end parameters as soon as the threshold is met\n                  to notifiy the component to fetch next chunk of data.\n                </p>\n                <p>\n                  {bi(\" fetchSize \")} determines the chunk size and{\" \"}\n                  {bi(\" limit \")} determines the max number of chunks the hook\n                  will request the component.\n                  <br></br> {i(\"Example\")}: if your fetch size is 10 and your\n                  limit is set to 500, the hook will update the start and end\n                  parameters with values like (0,10), (10,20)...(490, 500).\n                </p>\n                <p>\n                  If a scroll is not available/visible on the {bi(\" scroller \")}{\" \"}\n                  element provided, the hook will continue updating the start\n                  and end variables until the scroll is made available. After\n                  that, the normal load more on scroll behaviour will be\n                  restored.\n                </p>\n                <p>\n                  The hook will keep on updating the {bi(\" start \")} and{\" \"}\n                  {bi(\" end \")} variables until limit is breached or{\" \"}\n                  {bi(\" forceDonefetching \")} is called externally by the\n                  component.\n                </p>\n              </ul>\n            </Typography>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              API\n            </Typography>\n            <Typography color=\"textPrimary\">\n              <Typography variant=\"h6\" color=\"textPrimary\">\n                Hook Input\n              </Typography>\n              <ul>\n                <p>\n                  {b(\"fetchSize \")} {i(\"{Number, 10}\")} Determines the chunk\n                  size during each fetch\n                </p>\n                <p>\n                  {b(\"scroller \")} {i(\"{DOM Element}\")} A react {i(\"Ref\")}{\" \"}\n                  representing the list scroll container. Progressive fetching will be done based on the scroll\n                  position of this container.\n                </p>\n                <p>\n                  {b(\"limit \")} {i(\"{Number, 500}\")} Max. items to display in\n                  the list\n                </p>\n                <p>\n                  {b(\"mode \")} {i(\"{String, 'error'}\")} Set to {i(\"debug\")} to\n                  see the hook logs\n                </p>\n                <p>\n                  {b(\"minDelta \")} {i(\"{Number, 25}\")} The threshold gap (in\n                  pixels) between the container bottom and scroll position which\n                  will trigger the next fetch\n                </p>\n              </ul>\n              <Typography variant=\"h6\" color=\"textPrimary\">\n                Hook Output\n              </Typography>\n              <ul>\n                <p>\n                  {b(\"start\")} {i(\"{Number}\")} Start index or offset for the new\n                  chunk\n                </p>\n                <p>\n                  {b(\"end\")} {i(\"{Number}\")} End index or max. items in each\n                  chunk\n                </p>\n                <p>\n                  {b(\"isFetching\")} {i(\"{Boolean}\")} Status to denote the fetch\n                  status\n                </p>\n                <p>\n                  {b(\"doneFetching\")} {i(\"{Boolean}\")} Either reached the{\" \"}\n                  {i(\"limit\")} or component has called {i(\"forceDonefetching\")}\n                </p>\n                <p>\n                  {b(\"setIsFetching\")} {i(\"{Function}\")} Externally set the\n                  fetch status when fetching data.\n                </p>\n                <p>\n                  {b(\"forceDonefetching\")} {i(\"{Function}\")} Terminate future\n                  fetches\n                </p>\n              </ul>\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}