{"version":3,"sources":["../../src/index.js","List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["props","fetchSize","limit","scroller","mode","minDelta","Error","l","console","useState","lastFetchSize","setLastFetchSize","delta","setDelta","scrollTop","setScrollTop","scrollDirection","setScrollDirection","doneFetching","setDoneFetching","isFetching","setIsFetching","hasScrollbar","setHasScrollbar","initFetchCount","setInitFetchCount","lastCount","setLastCount","start","setStart","end","setEnd","scrollElement","previousScroll","scrollHandler","addEventListener","e","ListItem","children","List","ulElement","useRef","data","setData","useLoadMoreOnScroll","forceDonefetching","useEffect","fetchHandler","log","setTimeout","person","slice","ref","style","border","height","overflow","map","i","idx","key","first_name","last_name","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c5ca488.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useLoadMoreOnScroll = props => {\n    let { fetchSize = 10, limit = 500, scroller, mode = 'error', minDelta = 25 } = props;\n    if (!scroller) throw new Error(`Cannot use useLoadMoreOnScroll without specifying a scroller. \\n scroller MUST be an HtmlDOMElement acquired via useRef() or React.ref()`)\n    let l = () => {};\n    if (mode === 'debug') {\n        l = console.log;\n    }\n    const [lastFetchSize, setLastFetchSize] = useState(fetchSize);\n    const [delta, setDelta] = useState(999);\n    const [scrollTop, setScrollTop] = useState(0);\n    const [scrollDirection, setScrollDirection] = useState('none');\n    const [doneFetching, setDoneFetching] = useState(false);\n    const [isFetching, setIsFetching] = useState(true);\n    const [hasScrollbar, setHasScrollbar] = useState(false);\n    const [initFetchCount, setInitFetchCount] = useState(0);\n    const [lastCount, setLastCount] = useState(0);\n    const [start, setStart] = useState(0);\n    const [end, setEnd] = useState(0);\n\n\n    useEffect(() => {\n        if (!isFetching &&\n            !hasScrollbar &&\n            lastCount !== initFetchCount &&\n            !doneFetching\n        ) {\n            l(`Trying to  make the scrollbar visible : ${initFetchCount}`);\n            setLastFetchSize(lastFetchSize + fetchSize);\n        }\n        setLastCount(initFetchCount);\n    }, [\n        initFetchCount,\n        isFetching,\n        hasScrollbar,\n        lastFetchSize,\n        fetchSize,\n        doneFetching\n    ]);\n\n    useEffect(() => {\n        if (!hasScrollbar && !isFetching) {\n            setInitFetchCount(initFetchCount + 1);\n        }\n    }, [isFetching, hasScrollbar]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        setHasScrollbar(\n            scrollElement.scrollHeight > scrollElement.getBoundingClientRect().height\n        );\n    }, [isFetching]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        let previousScroll = 0;\n        l(`scroll listener added to element`, scrollElement);\n        const scrollHandler = scrollElement.addEventListener(\"scroll\", e => {\n            setScrollTop(scrollElement.scrollTop);\n            if (previousScroll < scrollElement.scrollTop) {\n                setScrollDirection(\"down\");\n            } else {\n                setScrollDirection(\"up\");\n            }\n            previousScroll = scrollElement.scrollTop;\n        });\n        return () => {\n            l(`scroll listener removed from element`, scrollElement);\n            scrollElement.removeEventListener(\"scroll\", scrollHandler);\n        };\n    }, [scroller]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        if (scrollDirection === \"down\") {\n            setDelta(scrollElement.scrollHeight - scrollElement.scrollTop - scrollElement.getBoundingClientRect().height);\n        }\n    }, [scrollTop, scrollDirection, isFetching]);\n\n    useEffect(() => {\n        l(`delta value ${delta} and scroll direction ${scrollDirection}`)\n        if (delta <= minDelta && !isFetching && !doneFetching) {\n            setLastFetchSize(lastFetchSize + fetchSize);\n        }\n    }, [delta, doneFetching]);\n\n    useEffect(() => {\n        if (lastFetchSize <= limit) {\n            setStart(lastFetchSize - fetchSize > 0 ? lastFetchSize - fetchSize : 0);\n            setEnd(lastFetchSize);\n            l(`Requesting fetch for start ${start} end ${end}`);\n        } else if (\n            limit - lastFetchSize + fetchSize > 0 &&\n            limit - lastFetchSize <= fetchSize\n        ) {\n            setStart(lastFetchSize - fetchSize);\n            setEnd(limit);\n            l(`Requesting fetch for start ${start} end ${end}`);\n        } else {\n            l(`Reached max limit set ${limit}`)\n            setDoneFetching(true);\n        }\n    }, [lastFetchSize, limit, fetchSize]);\n    const forceDonefetching = () => {\n        l(`User requested stop fetching`);\n        setDoneFetching(true)\n    }\n    return {\n        start,\n        end,\n        isFetching,\n        doneFetching,\n        setIsFetching,\n        forceDonefetching\n    };\n};\n\nexport default useLoadMoreOnScroll;","import React, { useState, useRef, useEffect } from \"react\";\nimport person from \"./mock.json\";\nimport useLoadMoreOnScroll from 'react-pagination';\n\n\nconst List = props => {\n  const fetchSize = 10;\n  const limit = 1000;\n  const ulElement = useRef();\n  const [data, setData] = useState([]);\n  const {\n    start,\n    end,\n    isFetching,\n    doneFetching,\n    setIsFetching,\n    forceDonefetching\n  } = useLoadMoreOnScroll({ fetchSize, scroller: ulElement, limit:107, mode:'error' });\n\n  useEffect(() => {\n    if (start !== end) fetchHandler(start, end);\n  }, [start, end]);\n\n  /**\n   *\n   * @param {Number} start : Index to start fetching from or commonaly called 'Offset'\n   * @param {Number} end : Last index\n   */\n  const fetchHandler = (start, end) => {\n    console.log(\"fetching\");\n    setIsFetching(true);\n    setTimeout(() => {\n      setData([...data, ...person.slice(start, end)]);\n      console.log(\"not fetching\");\n      setIsFetching(false);\n    }, 500);\n  };\n\n  return (\n    <ul ref={ulElement} style={{ border:'1px solid grey', height: \"200px\", overflow: \"auto\" }}>\n        {data.map((i, idx) => (\n          <ListItem\n            key={idx}\n          >{`${idx} ${i.first_name} ${i.last_name}`}</ListItem>\n        ))}\n        {isFetching && <b>loading...</b>}\n        {doneFetching && <b>Done!</b>}\n      </ul>\n  );\n};\nconst ListItem = props => {\n  return <div {...props}>{props.children}</div>;\n};\nexport default List;\n","import React, { useRef } from 'react';\nimport './App.css';\nimport List from './List';\n\n\n\nfunction App() {\n  const scroller = useRef();\n  return (\n    <div ref={scroller} className=\"App\" >\n      <List ></List>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}